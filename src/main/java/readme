2权限管理
2.1什么是权限管理
	基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现对用户访问系统的控制，按照安全规则或者安全策略控制用户可以访问而且只能访问自己被授权的资源。
	权限管理包括用户身份认证和授权两部分，简称认证授权。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。

一，关键对象
1.subject 主体
访问系统的用户或程序  谁访问谁就是主体

2.principal 身份信息
主体进行身份认证的一个标识，标识具有唯一性

3.凭证信息
只有主体自己知道的安全信息，如密码

二，授权
访问控制，控制主体能访问那些资源，只有主体通过身份验证后才需要授权操作


授权关键对象
who  主体(subject)需要进行访问的资源
what 表示资源（Resource）
how 权限/许可

数据库表
1.主体表（user表，账号，密码）
2.资源表
3.角色表
4.权限表

主体表有角色表id，  权限表有角色表id


权限校验框架，为什么选择Shiro

1.独立
2.简单，灵活

4.3.1Subject
	Subject即主体，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。	Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权
 4.3.2SecurityManager 
	SecurityManager即安全管理器，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。
	SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。
 4.3.3Authenticator
	Authenticator即认证器，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。
4.3.4Authorizer
	Authorizer即授权器，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。
 4.3.5Realm
	Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。
	注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。
 4.3.6sessionManager
sessionManager即会话管理，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。
4.3.7SessionDAO
SessionDAO即会话dao，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。
4.3.8CacheManager
CacheManager即缓存管理，将用户权限数据存储在缓存，这样可以提高性能。
4.3.9Cryptography
	Cryptography即密码管理，shiro提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。

